name: CI/CD

on:
  push:
    branches: [main]
  pull_request:

jobs:
  test-build-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      ECR_REPOSITORY: wwf-api
      DISTRIBUTION_ID: ${{ secrets.CF_DISTRIBUTION_ID }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}

      - name: Cache Node dependencies
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Python dependencies
        run: pip install -r backend/requirements.txt

      - name: Install Node dependencies
        working-directory: frontend
        run: |
          npm ci
          npx cypress install

      - name: Start Flask server
        run: |
          python backend/server.py &
          sleep 3

      - name: Run unit tests
        run: python -m pytest -x -v

      - name: Run Cypress smoke test
        working-directory: frontend
        run: npm run cypress
        continue-on-error: true

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Copy build to backend
        run: |
          rm -rf backend/static/*
          cp -r frontend/dist/* backend/static/

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      - name: Terraform fmt
        working-directory: infra/terraform
        run: terraform fmt -check

      - name: Terraform init
        working-directory: infra/terraform
        run: terraform init -backend=false

      - name: Terraform plan
        working-directory: infra/terraform
        run: terraform plan -input=false -lock=false -var-file=../live/variables.tfvars

      - name: Terraform apply
        if: github.ref == 'refs/heads/main' && secrets.AWS_ACCESS_KEY_ID
        working-directory: infra/terraform
        run: terraform apply -input=false -lock=false -auto-approve -var-file=../live/variables.tfvars

      - name: Configure AWS credentials
        if: github.ref == 'refs/heads/main' && secrets.AWS_ACCESS_KEY_ID
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        if: github.ref == 'refs/heads/main' && secrets.AWS_ACCESS_KEY_ID
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        if: github.ref == 'refs/heads/main' && secrets.AWS_ACCESS_KEY_ID
        run: |
          docker build -t $ECR_REPOSITORY:$GITHUB_SHA .
          docker tag $ECR_REPOSITORY:$GITHUB_SHA ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:$GITHUB_SHA
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:$GITHUB_SHA

      - name: Invalidate CloudFront cache
        if: github.ref == 'refs/heads/main' && secrets.AWS_ACCESS_KEY_ID
        run: |
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths '/*'
